From e2267e042ff6e5558c95474e0b0fff561c9077bb Mon Sep 17 00:00:00 2001
From: Heinz Wrobel <Heinz.Wrobel@nxp.com>
Date: Tue, 8 Nov 2022 13:41:53 +0100
Subject: [PATCH 16/20] pseudo: pseudo_root_path didn't work properly for
 chroot

The fix is not to use a vanilla readlink, but a readlink that translates
an output from within the chroot space into a full path. This however
requires us to change the function prototypes and invocation to pass
the readlink pointer that we want to use.

Signed-off-by: Heinz Wrobel <Heinz.Wrobel@nxp.com>
---
 pseudo.h        |  3 ++-
 pseudo_client.c | 43 +++++++++++++++++++++++++++++++++----------
 pseudo_client.h |  1 +
 pseudo_util.c   | 25 ++++++++++++++-----------
 4 files changed, 50 insertions(+), 22 deletions(-)

diff --git a/pseudo.h b/pseudo.h
index 4b5eaab..7fa3557 100644
--- a/pseudo.h
+++ b/pseudo.h
@@ -64,7 +64,8 @@ extern void pseudo_dump_data(char *, const void *, size_t);
 void pseudo_new_pid(void);
 /* pseudo_fix_path resolves symlinks up to this depth */
 #define PSEUDO_MAX_LINK_RECURSION 16
-extern char *pseudo_fix_path(const char *, const char *, size_t, size_t, size_t *, int);
+typedef ssize_t (*readlinkptr_t)(const char *path, char *buf, size_t bufsiz);
+extern char *pseudo_fix_path(const char *, const char *, size_t, size_t, size_t *, int, readlinkptr_t);
 extern void pseudo_dropenv(void);
 extern char **pseudo_dropenvp(char * const *);
 extern void pseudo_setupenv(void);
diff --git a/pseudo_client.c b/pseudo_client.c
index d1bd32f..1a773f3 100644
--- a/pseudo_client.c
+++ b/pseudo_client.c
@@ -1552,8 +1552,8 @@ static char *patternlistmatchespath(const char *patternlist, const char *path, c
 	return foundpath;
 }
 
-static int ischrootpath(const char *basepath) {
-	if (pseudo_chroot_len && basepath &&
+int ischrootpath(const char *basepath) {
+    if (pseudo_chroot_len && basepath &&
 		strlen(basepath) >= pseudo_chroot_len &&
 		!memcmp(basepath, pseudo_chroot, pseudo_chroot_len) &&
 		(basepath[pseudo_chroot_len] == '\0' || basepath[pseudo_chroot_len] == '/')) {
@@ -1563,6 +1563,29 @@ static int ischrootpath(const char *basepath) {
 	return 0;
 }
 
+static ssize_t
+readlink_chroot(const char *path, char *buf, size_t bufsiz) {
+	ssize_t linklen;
+
+	pseudo_debug(PDBGF_CHROOT, "readlink_chroot(%s,...)\n", path);
+	linklen = readlink(path, buf, bufsiz);
+	/* symlinks within a chroot environment should be treated as such
+	 * and need to be converted back into a full path if absolute! */
+	if (ischrootpath(path) && (linklen > 0) && (*buf == '/')) {
+		if (pseudo_chroot_len + linklen < bufsiz) {
+			memmove(buf + pseudo_chroot_len, buf, linklen);
+			memcpy(buf, pseudo_chroot, pseudo_chroot_len);
+			linklen += pseudo_chroot_len;
+		}
+		else {
+			errno = ENAMETOOLONG;
+			linklen = -1;
+		}
+	}
+
+	return(linklen);
+}
+
 static char *
 base_path(int dirfd, const char *path, int leave_last) {
 	char *basepath = 0;
@@ -1619,7 +1642,7 @@ base_path(int dirfd, const char *path, int leave_last) {
 		}
 	}
 
-	newpath = pseudo_fix_path(basepath, path, minlen, baselen, NULL, leave_last);
+	newpath = pseudo_fix_path(basepath, path, minlen, baselen, NULL, leave_last, readlink_chroot);
 	pseudo_debug(PDBGF_PATH, "base_path[%s]: %s</>%s => %s\n",
 		leave_last ? "nofollow" : "follow",
 		basepath ? basepath : "<nil>",
@@ -2532,7 +2555,7 @@ pseudo_exec_path(const char **filenamep, int search_path, char * const**argvp) {
 		if (forcechroot)
 			candidate = pseudo_root_path(__func__, __LINE__, AT_FDCWD, filename, 0);
 		else
-			candidate = pseudo_fix_path(NULL, filename, 0, 0, NULL, 0);
+			candidate = pseudo_fix_path(NULL, filename, 0, 0, NULL, 0, readlink_chroot);
 
 		if (pseudo_chroot_len) {
 			checkscript = exec_chroot_scriptcheck(filenamep, argvp, filename, candidate);
@@ -2550,7 +2573,7 @@ pseudo_exec_path(const char **filenamep, int search_path, char * const**argvp) {
 		if (forcechroot)
 			candidate = pseudo_root_path(__func__, __LINE__, AT_FDCWD, filename, 0);
 		else
-			candidate = pseudo_fix_path(pseudo_cwd, filename, 0, pseudo_cwd_len, NULL, 0);
+			candidate = pseudo_fix_path(pseudo_cwd, filename, 0, pseudo_cwd_len, NULL, 0, readlink_chroot);
 
 		if (pseudo_chroot_len) {
 			checkscript = exec_chroot_scriptcheck(filenamep, argvp, filename, candidate);
@@ -2584,20 +2607,20 @@ pseudo_exec_path(const char **filenamep, int search_path, char * const**argvp) {
 			if (forcechroot || pforcechroot)
 				candidate = pseudo_root_path(__func__, __LINE__, AT_FDCWD, filename, 0);
 			else
-				candidate = pseudo_fix_path(pseudo_cwd, filename, 0, pseudo_cwd_len, NULL, 0);
+				candidate = pseudo_fix_path(pseudo_cwd, filename, 0, pseudo_cwd_len, NULL, 0, readlink_chroot);
 			pseudo_debug(PDBGF_CLIENT, "exec_path: in cwd, got %s\n", candidate);
 		} else if (*path == '/') {
 			if (forcechroot || pforcechroot) {
 				char *dir = pseudo_root_path(__func__, __LINE__, AT_FDCWD, path, 0);
 				if (dir)
-					candidate = pseudo_fix_path(dir, filename, 0, strlen(dir), NULL, 0);
+					candidate = pseudo_fix_path(dir, filename, 0, strlen(dir), NULL, 0, readlink_chroot);
 				else {
 					pseudo_diag("couldn't allocate intermediate path.\n");
 					candidate = NULL;
 				}
 			}
 			else
-				candidate = pseudo_fix_path(path, filename, 0, path_lens[i], NULL, 0);
+				candidate = pseudo_fix_path(path, filename, 0, path_lens[i], NULL, 0, readlink_chroot);
 			pseudo_debug(PDBGF_CLIENT, "exec_path: got %s\n", candidate);
 		} else {
 			/* oh you jerk, making me do extra work */
@@ -2609,9 +2632,9 @@ pseudo_exec_path(const char **filenamep, int search_path, char * const**argvp) {
 					len = strlen(dir);
 			}
 			else
-				dir = pseudo_fix_path(pseudo_cwd, path, 0, pseudo_cwd_len, &len, 0);
+				dir = pseudo_fix_path(pseudo_cwd, path, 0, pseudo_cwd_len, &len, 0, readlink_chroot);
 			if (dir) {
-				candidate = pseudo_fix_path(dir, filename, 0, len, NULL, 0);
+				candidate = pseudo_fix_path(dir, filename, 0, len, NULL, 0, readlink_chroot);
 				pseudo_debug(PDBGF_CLIENT, "exec_path: got %s for non-absolute path\n", candidate);
 			} else {
 				pseudo_diag("couldn't allocate intermediate path.\n");
diff --git a/pseudo_client.h b/pseudo_client.h
index 7170fb6..9b1b0b1 100644
--- a/pseudo_client.h
+++ b/pseudo_client.h
@@ -61,6 +61,7 @@ extern int (*pseudo_real_execv)(const char *, char * const *);
 /* support related to chroot/getcwd/etc. */
 extern int pseudo_client_getcwd(void);
 extern int pseudo_client_chroot(const char *);
+extern int ischrootpath(const char *basepath);
 extern char *pseudo_root_path(const char *, int, int, const char *, int);
 extern const char *pseudo_exec_path(const char **filenamep, int, char * const**argvp);
 #define PSEUDO_ROOT_PATH(x, y, z) pseudo_root_path(__func__, __LINE__, (x), (y), (z));
diff --git a/pseudo_util.c b/pseudo_util.c
index 0ce9095..4dc1215 100644
--- a/pseudo_util.c
+++ b/pseudo_util.c
@@ -28,6 +28,7 @@
 #include "pseudo.h"
 #include "pseudo_ipc.h"
 #include "pseudo_db.h"
+#include "pseudo_client.h"
 
 struct pseudo_variables {
 	char *key;
@@ -259,8 +260,8 @@ int pseudo_util_evlog_fd = 2;
 static int debugged_newline = 1;
 static char pid_text[32];
 static size_t pid_len;
-static int pseudo_append_element(char *newpath, char *root, size_t allocated, char **pcurrent, const char *element, size_t elen, PSEUDO_STATBUF *buf, int leave_this);
-static int pseudo_append_elements(char *newpath, char *root, size_t allocated, char **current, const char *elements, size_t elen, int leave_last, PSEUDO_STATBUF *sbuf);
+static int pseudo_append_element(char *newpath, char *root, size_t allocated, char **pcurrent, const char *element, size_t elen, PSEUDO_STATBUF *buf, int leave_this, readlinkptr_t readlinkp);
+static int pseudo_append_elements(char *newpath, char *root, size_t allocated, char **current, const char *elements, size_t elen, int leave_last, PSEUDO_STATBUF *buf, readlinkptr_t readlinkp);
 extern char **environ;
 static ssize_t pseudo_max_pathlen = -1;
 static ssize_t pseudo_sys_max_pathlen = -1;
@@ -612,7 +613,7 @@ pseudo_new_pid() {
  * the symlink, appending each element in turn the same way.
  */
 static int
-pseudo_append_element(char *newpath, char *root, size_t allocated, char **pcurrent, const char *element, size_t elen, PSEUDO_STATBUF *buf, int leave_this) {
+pseudo_append_element(char *newpath, char *root, size_t allocated, char **pcurrent, const char *element, size_t elen, PSEUDO_STATBUF *buf, int leave_this, readlinkptr_t readlinkp) {
 	static int link_recursion = 0;
 	size_t curlen;
 	int is_dir = S_ISDIR(buf->st_mode);
@@ -680,7 +681,7 @@ pseudo_append_element(char *newpath, char *root, size_t allocated, char **pcurre
 	 * were appending to. we don't want to actually try to do this when
 	 * we're appending names to a regular file.
 	 */
-	if (!leave_this && is_dir) {
+	if ( (!(leave_this & AT_SYMLINK_NOFOLLOW)) && is_dir) {
 		int is_link = S_ISLNK(buf->st_mode);
 		if (link_recursion >= PSEUDO_MAX_LINK_RECURSION && is_link) {
 			pseudo_debug(PDBGF_PATH, "link recursion too deep, not expanding path '%s'.\n", newpath);
@@ -691,7 +692,7 @@ pseudo_append_element(char *newpath, char *root, size_t allocated, char **pcurre
 			ssize_t linklen;
 			int retval;
 
-			linklen = readlink(newpath, linkbuf, pseudo_path_max());
+			linklen = (*readlinkp)(newpath, linkbuf, pseudo_path_max());
 			if (linklen == -1) {
 				pseudo_debug(PDBGF_PATH, "uh-oh!  '%s' seems to be a symlink, but I can't read it.  Ignoring.\n", newpath);
 				*pcurrent = current;
@@ -717,7 +718,7 @@ pseudo_append_element(char *newpath, char *root, size_t allocated, char **pcurre
 			buf->st_mode = S_IFDIR;
 			/* append all the elements in series */
 			++link_recursion;
-			retval = pseudo_append_elements(newpath, root, allocated, pcurrent, linkbuf, linklen, 0, buf);
+			retval = pseudo_append_elements(newpath, root, allocated, pcurrent, linkbuf, linklen, 0, buf, readlinkp);
 			--link_recursion;
 			return retval;
 		}
@@ -730,7 +731,7 @@ pseudo_append_element(char *newpath, char *root, size_t allocated, char **pcurre
 }
 
 static int
-pseudo_append_elements(char *newpath, char *root, size_t allocated, char **current, const char *path, size_t elen, int leave_last, PSEUDO_STATBUF *sbuf) {
+pseudo_append_elements(char *newpath, char *root, size_t allocated, char **current, const char *path, size_t elen, int leave_last, PSEUDO_STATBUF *sbuf, readlinkptr_t readlinkp) {
 	int retval = 1;
 	/* a shareable buffer so we can cache stat results while walking the path */
 	PSEUDO_STATBUF buf;
@@ -778,7 +779,7 @@ pseudo_append_elements(char *newpath, char *root, size_t allocated, char **curre
 		 */
 		pseudo_debug(PDBGF_PATH | PDBGF_VERBOSE, "element to add: '%.*s'\n",
 			(int) this_elen, path);
-		if (pseudo_append_element(newpath, root, allocated, current, path, this_elen, sbuf, leave_this) == -1) {
+		if (pseudo_append_element(newpath, root, allocated, current, path, this_elen, sbuf, leave_this, readlinkp) == -1) {
 			retval = -1;
 			break;
 		}
@@ -801,13 +802,15 @@ static int pathbuf = 0;
  * is that path may contain symlinks, which must be resolved.
  */
 char *
-pseudo_fix_path(const char *base, const char *path, size_t rootlen, size_t baselen, size_t *lenp, int leave_last) {
+pseudo_fix_path(const char *base, const char *path, size_t rootlen, size_t baselen, size_t *lenp, int leave_last, readlinkptr_t readlinkp) {
 	size_t newpathlen, pathlen;
 	char *newpath;
 	char *current;
 	char *effective_root;
 	int trailing_slash = 0;
 	
+	if (!readlinkp)
+		readlinkp = readlink;
 	if (!path) {
 		pseudo_diag("can't fix empty path.\n");
 		return 0;
@@ -868,7 +871,7 @@ pseudo_fix_path(const char *base, const char *path, size_t rootlen, size_t basel
 	 * (current - newpath) is the used length of newpath
 	 */
 	int save_errno = errno;
-	if (pseudo_append_elements(newpath, effective_root, newpathlen, &current, path, pathlen, leave_last, 0) != -1) {
+	if (pseudo_append_elements(newpath, effective_root, newpathlen, &current, path, pathlen, leave_last, 0, readlinkp) != -1) {
 		/* if we are expecting a trailing slash, or the path ended up being completely
 		 * empty (meaning it's pointing at either effective_root or the beginning of
 		 * the path), we need a slash here.
@@ -1268,7 +1271,7 @@ pseudo_get_prefix(char *pathname) {
 			s += snprintf(s, pseudo_path_max() - (s - mypath), "/%s",
 				pathname);
 		}
-		tmp_path = pseudo_fix_path(NULL, mypath, 0, 0, 0, AT_SYMLINK_NOFOLLOW);
+		tmp_path = pseudo_fix_path(NULL, mypath, 0, 0, 0, AT_SYMLINK_NOFOLLOW, NULL);
 		/* point s to the end of the fixed path */
 		if ((int) strlen(tmp_path) >= pseudo_path_max()) {
 			pseudo_diag("Can't expand path '%s' -- expansion exceeds %d.\n",
-- 
2.34.1

