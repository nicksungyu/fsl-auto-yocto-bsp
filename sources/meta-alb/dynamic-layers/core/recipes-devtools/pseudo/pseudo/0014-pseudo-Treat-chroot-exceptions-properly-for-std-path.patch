From 13a81b95e10bcc1da0371b401690d13d73332c04 Mon Sep 17 00:00:00 2001
From: Heinz Wrobel <Heinz.Wrobel@nxp.com>
Date: Tue, 8 Nov 2022 12:52:44 +0100
Subject: [PATCH 14/20] pseudo: Treat chroot exceptions properly for std paths.

The problem to solve is that our pseudo_path_exec() gets called through
the exec functions from shell code which did its own path search.
So "normal" searches need

Signed-off-by: Heinz Wrobel <Heinz.Wrobel@nxp.com>
---
 pseudo_client.c | 18 ++++++++++++++----
 1 file changed, 14 insertions(+), 4 deletions(-)

diff --git a/pseudo_client.c b/pseudo_client.c
index 9346e6d..d1bd32f 100644
--- a/pseudo_client.c
+++ b/pseudo_client.c
@@ -1603,10 +1603,20 @@ base_path(int dirfd, const char *path, int leave_last) {
 		if (ischrootpath(basepath))
 			minlen = pseudo_chroot_len;
 	} else if (pseudo_chroot_len) {
-		/* "absolute" is really relative to chroot path */
-		basepath = pseudo_chroot;
-		baselen = pseudo_chroot_len;
-		minlen = pseudo_chroot_len;
+		/* This correlates to pseudo_exec_path() but is not
+		 * identical in nature. For file access, default in
+		 * pseudo is to access chroot. So we access chroot by
+		 * default unless we have a specific exception.
+		 * Forcing something into chroot is meaningless here because
+		 * of the default to be in chroot anyway for files.
+		 */
+		if (/*patternlistmatchespath(getenv("PSEUDO_CHROOT_FORCED"), path, NULL, 0, 0) && */
+		    !patternlistmatchespath(getenv("PSEUDO_CHROOT_EXCEPTIONS"), path, NULL, 0, 0)) {
+			/* "absolute" is really relative to chroot path */
+			basepath = pseudo_chroot;
+			baselen = pseudo_chroot_len;
+			minlen = pseudo_chroot_len;
+		}
 	}
 
 	newpath = pseudo_fix_path(basepath, path, minlen, baselen, NULL, leave_last);
-- 
2.34.1

