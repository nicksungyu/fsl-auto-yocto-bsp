From 2688dd322d4b888a9811485b48fb43e3d094f13f Mon Sep 17 00:00:00 2001
From: Heinz Wrobel <Heinz.Wrobel@nxp.com>
Date: Mon, 26 Dec 2022 16:44:38 +0100
Subject: [PATCH 1/2] u-boot: First attempt to add GIC support for ARMv8

We need to have the capability to use interrupt handlers in U-Boot
to support PCIe in EP mode on Layerscape devices. Within careful limits
this may be quite helpful also to ensure the proper state of other
HW blocks. It is not meant to turn U-Boot into an interrupt driven
code base.

Signed-off-by: Heinz Wrobel <Heinz.Wrobel@nxp.com>
Signed-off-by: Dan Nica <dan.nica@nxp.com>
---
 arch/arm/Kconfig                  |   2 +
 arch/arm/include/asm/gicsupport.h |  11 +
 arch/arm/lib/Kconfig              |  26 ++
 arch/arm/lib/Makefile             |   1 +
 arch/arm/lib/gicsupport.c         | 389 ++++++++++++++++++++++++++++++
 arch/arm/lib/interrupts_64.c      |   8 +-
 6 files changed, 433 insertions(+), 4 deletions(-)
 create mode 100644 arch/arm/include/asm/gicsupport.h
 create mode 100644 arch/arm/lib/Kconfig
 create mode 100644 arch/arm/lib/gicsupport.c

diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index 379a2f91ec..0115b1d79d 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -2111,6 +2111,8 @@ config SYS_KWD_CONFIG
 
 source "arch/arm/mach-apple/Kconfig"
 
+source "arch/arm/lib/Kconfig"
+
 source "arch/arm/mach-aspeed/Kconfig"
 
 source "arch/arm/mach-at91/Kconfig"
diff --git a/arch/arm/include/asm/gicsupport.h b/arch/arm/include/asm/gicsupport.h
new file mode 100644
index 0000000000..6ecc9978cd
--- /dev/null
+++ b/arch/arm/include/asm/gicsupport.h
@@ -0,0 +1,11 @@
+/*
+ * Copyright 2016, NXP
+ *
+ */
+ /* Functions defined in arch/arm/cpu/armv8/gicsupport.c */
+void gic_unmask_irq(unsigned int irq);
+void gic_mask_irq(unsigned int irq);
+void gic_clear_pending_irq(unsigned int irq);
+int gic_irq_status(unsigned int irq);
+static void gic_set_type(unsigned int irq, int type);
+int gic_register_handler(int irq, void (*handler)(struct pt_regs *pt_regs, unsigned int esr), int type, const char *name);
diff --git a/arch/arm/lib/Kconfig b/arch/arm/lib/Kconfig
new file mode 100644
index 0000000000..15ea73cdca
--- /dev/null
+++ b/arch/arm/lib/Kconfig
@@ -0,0 +1,26 @@
+menu "Interrupt handler support"
+	depends on ARM64
+
+config GICSUPPORT
+	bool "Enable GIC support for interrupt handlers"
+	help
+	 This adds generic support functions for the Arm GIC V2 and V3.
+	 If unsure, say N.
+
+config SUPPORT_IRQHANDLERS
+	bool "Support interrupt handlers within U-Boot"
+	select GICSUPPORT
+	help
+	  Say Y here to support interrupt handlers within U-Boot.
+	  If unsure, say N and see if U-Boot still builds properly.
+	  Specific IP blocks, e.g., PCIe on Layerscape devices in EP
+	  mode need supporting interrupt handlers to function correctly.
+	  This setting is required for configurations with such drivers.
+
+config CMD_IRQINFO
+	bool "irqinfo"
+	select SUPPORT_IRQHANDLERS
+	help
+	  Print interrupt statistics for all registered handlers.
+
+endmenu
diff --git a/arch/arm/lib/Makefile b/arch/arm/lib/Makefile
index c48e1f622d..30d19e2818 100644
--- a/arch/arm/lib/Makefile
+++ b/arch/arm/lib/Makefile
@@ -59,6 +59,7 @@ else ifdef CONFIG_ARM64
 obj-$(CONFIG_FSL_LAYERSCAPE) += ccn504.o
 ifneq ($(CONFIG_GICV2)$(CONFIG_GICV3),)
 obj-y	+= gic_64.o
+obj-$(CONFIG_GICSUPPORT)	+= gicsupport.o
 endif
 obj-$(CONFIG_GIC_V3_ITS)	+= gic-v3-its.o
 obj-y	+= interrupts_64.o
diff --git a/arch/arm/lib/gicsupport.c b/arch/arm/lib/gicsupport.c
new file mode 100644
index 0000000000..cfddf4b02b
--- /dev/null
+++ b/arch/arm/lib/gicsupport.c
@@ -0,0 +1,389 @@
+/*
+ * (C) Copyright 2016
+ * Heinz Wrobel <Heinz.Wrobel@nxp.com>
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ *
+ * Basic GIC support to permit dealing with interrupt handlers in ARMv8.
+ * This code is currently only tested on S32V234/LS2, but should be generic
+ * enough to be placed outside a CPU specific directory at some point.
+ * We ignore SGI/PPI because that is done in gic_64.S.
+ *
+ * Some of this code is taken from sources developed by <Jay.Tu@nxp.com>
+ */
+
+#include <common.h>
+#include <config.h>
+#include <linux/compiler.h>
+#include <linux/stringify.h>
+#include <asm/system.h>
+#include <asm/io.h>
+#include <asm/gicsupport.h>
+#include <asm/gic.h>
+#include <asm/global_data.h>
+#include <asm/proc-armv/system.h>
+#include <asm/ptrace.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+#define ENTRIES(x) (sizeof(x)/sizeof(x[0]))
+
+/* A performance implementation would use an indexed table.
+ * U-Boot has a need for a small footprint, so we do a simple search
+ * and only support a few handlers concurrently.
+ */
+static struct
+{
+	int     irq;
+	void (*handler)(struct pt_regs *pt_regs, unsigned int esr);
+	const char *name;
+	int type;
+	uint32_t count;
+} inthandlers[16];
+static uint32_t count_spurious;
+static int preinitdone = 0, fullinitdone = 0;
+
+static void interrupt_handler_init(void)
+{
+	/* We need to decouple this init from the generic
+	 * interrupt_init() function because interrupt handlers
+	 * may be preregistered by code before the GIC init has
+	 * happened! PCIe support is a good example for this.
+	 */
+	int i;
+
+	if (!preinitdone) {
+		preinitdone = 1;
+		/* Make sure that we do not have any active handlers */
+		for (i = 0; i < ENTRIES(inthandlers); i++) {
+			inthandlers[i].irq = -1;
+			inthandlers[i].count = 0;
+		}
+		count_spurious = 0;
+	}
+}
+
+/* Public function to support handlers. Benign to call before GIC init */
+void gic_unmask_irq(unsigned int irq)
+{
+	uint32_t mask;
+
+	if (fullinitdone) {
+		mask = 1 << (irq & 0x1f);
+		writel(mask, GICD_BASE + GICD_ISENABLERn + (irq >> 5) * sizeof(uint32_t));
+	}
+}
+
+/* Public function to support handlers. Benign to call before GIC init */
+void gic_mask_irq(unsigned int irq)
+{
+	uint32_t mask;
+
+	mask = 1 << (irq & 0x1f);
+	writel(mask, GICD_BASE + GICD_ICENABLERn + (irq >> 5) * sizeof(uint32_t));
+}
+
+/* Public function to support handlers. Benign to call before GIC init */
+/* To support edge-triggered interrupts */
+void gic_clear_pending_irq(unsigned int irq)
+{
+	uint32_t mask;
+
+	mask = 1 << (irq & 0x1f);
+	writel(mask, GICD_BASE + GICD_ICPENDRn + (irq >> 5) * sizeof(uint32_t));
+}
+
+/* Public function to support handlers. Benign to call before GIC init */
+int gic_irq_status(unsigned int irq)
+{
+	uint32_t mask;
+
+	uint32_t v = readl(GICD_BASE + GICD_ISPENDRn + (irq >> 5) * sizeof(uint32_t));
+	mask = 1 << (irq & 0x1f);
+
+	return !!(v & mask);
+
+}
+
+/* Public function to support handlers. Benign to call before GIC init */
+static void gic_set_type(unsigned int irq, int type)
+{
+	int shift = (irq & 0x0f) * 2;
+	uint32_t mask, icfgr;
+
+	if (fullinitdone) {
+		mask = 0x3 << shift;
+		icfgr = readl(GICD_BASE + GICD_ICFGR + (irq >> 4) * sizeof(uint32_t));
+		icfgr &= ~mask;
+		icfgr |= ((type & 0x3) << shift);
+		writel(icfgr, GICD_BASE + GICD_ICFGR + (irq >> 4) * sizeof(uint32_t));
+	}
+}
+
+int gic_register_handler(int irq, void (*handler)(struct pt_regs *pt_regs, unsigned int esr), int type, const char *name)
+{
+	int i;
+
+	interrupt_handler_init();
+
+	if (fullinitdone)
+		gic_mask_irq(irq);
+
+	for (i = 0; i < ENTRIES(inthandlers); i++) {
+		if(inthandlers[i].irq < 0) {
+			inthandlers[i].handler = handler;
+			inthandlers[i].name = name;
+			inthandlers[i].type = type;
+
+			/* Done last to avoid race condition */
+			inthandlers[i].irq = irq;
+
+			if (fullinitdone) {
+				gic_set_type(irq, type);
+				gic_unmask_irq(irq);
+			}
+			break;
+		}
+	}
+
+	return i >= ENTRIES(inthandlers) ? 0 : 1;
+}
+
+static void gic_dist_init(unsigned long base)
+{
+	unsigned int gic_irqs, i;
+	uint32_t ctlr = readl(base + GICD_CTLR);
+
+	/* We turn off the GIC while we mess with it.
+	 * The original init has happened in gic_64.S!
+	 */
+	writel(ctlr & ~3, base + GICD_CTLR);
+
+	gic_irqs = readl(base + GICD_TYPER) & 0x1f;
+	gic_irqs = (gic_irqs + 1) * 32;
+
+	/*
+	 * Set all global interrupts to be level triggered, active low.
+	 */
+	for (i = 32; i < gic_irqs; i += 16)
+		writel(0, base + GICD_ICFGR + i * 4 / 16);
+
+	/*
+	 * Set all global interrupts to this CPU only.
+	 */
+	for (i = 32; i < gic_irqs; i += 4)
+		writel(0x01010101, base + GICD_ITARGETSRn + i * 4 / 4);
+
+	/*
+	 * Set priority on all global interrupts.
+	 */
+	for (i = 32; i < gic_irqs; i += 4)
+		writel(0xa0a0a0a0, base + GICD_IPRIORITYRn + i * 4 / 4);
+
+	/*
+	 * Disable all interrupts.  Leave the PPI and SGIs alone
+	 * as these enables are banked registers.
+	 */
+	for (i = 32; i < gic_irqs; i += 32)
+		writel(0xffffffff, base + GICD_ICENABLERn + i * 4 / 32);
+
+	writel(ctlr, base + GICD_CTLR);
+}
+
+static void gic_cpu_clean(unsigned long dist_base)
+{
+	/* Initially we need to make sure that we do not have any
+	 * left over requests that could cause a mess during
+	 * initialization. This happens during sloppy SMP init in
+	 * lowlevel.S and should be FIXED. *sigh*
+	 */
+	writel(0xffffffff, dist_base + GICD_ICENABLERn);
+
+}
+
+static inline unsigned int get_iar(void)
+{
+	unsigned int val;
+#if defined(CONFIG_GICV3)
+	asm volatile("mrs %0, " __stringify(ICC_IAR1_EL1) : "=r" (val) : : "cc");
+#elif defined(CONFIG_GICV2)
+	val = readl(GICC_BASE + GICC_IAR);
+#else
+#error GIC type not properly defined!
+#endif
+
+	return val;
+}
+
+static inline void set_pmr(unsigned int val)
+{
+#if defined(CONFIG_GICV3)
+	asm volatile("msr " __stringify(ICC_PMR_EL1) ", %0" : : "r" (val) : "cc");
+#elif defined(CONFIG_GICV2)
+	writel(val, GICC_BASE + GICC_PMR);
+#else
+#error GIC type not properly defined!
+#endif
+}
+
+static inline void set_ctlr(unsigned int val)
+{
+#if defined(CONFIG_GICV3)
+	unsigned int el;
+
+	el = current_el();
+	if (el == 1)
+		asm volatile("msr " __stringify(ICC_CTLR_EL1)", %0" : : "r" (val) : "cc");
+	else if (el == 2)
+		asm volatile("msr " __stringify(ICC_CTLR_EL2)", %0" : : "r" (val) : "cc");
+	else
+		asm volatile("msr " __stringify(ICC_CTLR_EL3)", %0" : : "r" (val) : "cc");
+#elif defined(CONFIG_GICV2)
+	writel(val, GICC_BASE + GICC_CTLR);
+#else
+#error GIC type not properly defined!
+#endif
+}
+
+static inline void set_eior(unsigned int val)
+{
+#if defined(CONFIG_GICV3)
+	asm volatile("msr " __stringify(ICC_EOIR1_EL1)", %0" : : "r" (val) : "cc");
+#elif defined(CONFIG_GICV2)
+	writel(val, GICC_BASE + GICC_EIOR);
+#else
+#error GIC type not properly defined!
+#endif
+}
+
+static void gic_cpu_init(unsigned long dist_base)
+{
+	/* Accept just about anything */
+	set_pmr(0xff);
+
+#if defined(CONFIG_GICV3)
+#elif defined(CONFIG_GICV2)
+	/* gic_64.S doesn't set the recommended AckCtl value. We do */
+	set_ctlr(0x1e3);
+#endif
+}
+
+#if defined(CONFIG_SUPPORT_IRQHANDLERS)
+int arch_interrupt_init(void)
+{
+	int i;
+
+	interrupt_handler_init();
+
+	gic_cpu_clean(GICD_BASE);
+
+	gic_dist_init(GICD_BASE);
+
+	/* U-Boot runs with a single CPU only */
+	gic_cpu_init(GICD_BASE);
+
+	fullinitdone = 1;
+
+	/* Now that we have set up the GIC, we need to start up
+	 * any preregistered handlers.
+	 */
+	for (i = 0; i < ENTRIES(inthandlers); i++) {
+		int irq = inthandlers[i].irq;
+		if(irq >= 0) {
+			if (fullinitdone) {
+				gic_set_type(irq, inthandlers[i].type);
+				gic_unmask_irq(irq);
+			}
+		}
+	}
+
+	return 0;
+}
+
+int interrupt_init (void)
+{
+	return arch_interrupt_init();
+}
+
+void enable_interrupts(void)
+{
+	local_irq_enable();
+}
+
+int disable_interrupts(void)
+{
+	int flags;
+
+	local_irq_save(flags);
+
+	return flags;
+}
+
+void do_irq(struct pt_regs *pt_regs, unsigned int esr)
+{
+	int i;
+	int group = 0;
+	uint32_t thisirq;
+
+	thisirq = get_iar();
+
+#if defined(CONFIG_GICV2)
+	if (thisirq == 1022) {
+		/* Group 1 interrupt! */
+		group = 1;
+		thisirq = readl(GICC_BASE + GICC_AIAR);
+	}
+#endif
+
+	if (thisirq == 1023) {
+		count_spurious++;
+		return;
+	}
+
+	for (i = 0; i < ENTRIES(inthandlers); i++) {
+		if(inthandlers[i].irq == thisirq) {
+			inthandlers[i].count++;
+			(inthandlers[i].handler)(pt_regs, esr);
+
+			break;
+		}
+	}
+
+#if defined(CONFIG_GICV3)
+	set_eior(thisirq);
+#elif defined(CONFIG_GICV2)
+	if (group) {
+		writel(thisirq, GICC_BASE + GICC_AEOIR);
+	}
+	else {
+		writel(thisirq, GICC_BASE + GICC_EOIR);
+	}
+#endif
+
+	if (i >= ENTRIES(inthandlers)) {
+		printf("\"Irq\" handler, esr 0x%08x for GIC irq %d, group %d\n",
+		       esr, thisirq, group);
+		show_regs(pt_regs);
+		panic("Resetting CPU ...\n");
+	}
+}
+#endif
+
+#if defined(CONFIG_CMD_IRQINFO)
+int do_irqinfo (struct cmd_tbl *cmdtp, int flag, int argc, char * const argv[])
+{
+	int i;
+
+	printf("GIC support is enabled for GIC @ 0x%08x\n", GICD_BASE);
+	printf("Spurious: %d\n", count_spurious);
+	for (i = 0; i < ENTRIES(inthandlers); i++) {
+		if(inthandlers[i].irq >= 0) {
+			printf("%20s(%d): %d\n", inthandlers[i].name,
+			       inthandlers[i].irq,
+			       inthandlers[i].count);
+		}
+	}
+
+	return 0;
+}
+#endif
diff --git a/arch/arm/lib/interrupts_64.c b/arch/arm/lib/interrupts_64.c
index c653e67db2..053974269e 100644
--- a/arch/arm/lib/interrupts_64.c
+++ b/arch/arm/lib/interrupts_64.c
@@ -13,19 +13,19 @@
 
 DECLARE_GLOBAL_DATA_PTR;
 
-int interrupt_init(void)
+int __weak interrupt_init(void)
 {
 	enable_interrupts();
 
 	return 0;
 }
 
-void enable_interrupts(void)
+void __weak enable_interrupts(void)
 {
 	return;
 }
 
-int disable_interrupts(void)
+int __weak disable_interrupts(void)
 {
 	return 0;
 }
@@ -126,7 +126,7 @@ void do_sync(struct pt_regs *pt_regs, unsigned int esr)
 /*
  * do_irq handles the Irq exception.
  */
-void do_irq(struct pt_regs *pt_regs, unsigned int esr)
+void __weak do_irq(struct pt_regs *pt_regs, unsigned int esr)
 {
 	efi_restore_gd();
 	printf("\"Irq\" handler, esr 0x%08x\n", esr);
-- 
2.34.1

